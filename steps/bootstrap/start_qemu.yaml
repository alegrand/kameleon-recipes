# Require SSH_FWD_PORT bash environment variable to be set
- disk_cache: unsafe
# This must be set if you want to boot an ISO image instead of a disk
- iso_path: ""
- vm_boot: cdrom
- vm_expected_service: ssh
- boot_timeout: 100
- shutdown_timeout: 100
- debug: "false"
- socat_monitor: socat - UNIX-CONNECT:$${qemu_monitor_socket}
- qemu_sendkeys_script: $${kameleon_data_dir}/qemu-sendkeys.rb
- qemu_sendkeys_commands: 
- vm_expected_service: ssh
- vm_cleanup_section: setup
- shutdown_vm_immediately: false
- force_vm_shutdown: true
- check_cmd_local: socat

- start_vm:
  - on_checkpoint: redo
  - check_cmd_local: qemu-system-$${qemu_arch}
  - exec_local: |
      echo "Starting qemu..."
      if [ "$${qemu_enable_kvm}" = "true" ]; then
        ENABLE_KVM="-enable-kvm -cpu host"
        BOOT_TIMEOUT=$${boot_timeout}
      else
        BOOT_TIMEOUT=$(($${boot_timeout}*2))
      fi
      if [ -f "vm_state_to_load.txt" ]
      then
          SAVED_STATE="$(< vm_state_to_load.txt)"
          LOADVM="-loadvm $SAVED_STATE"
          rm -f vm_state_to_load.txt
      fi
      if [ "$${debug}" = "true" ]; then
        VNC_OPT=""
      else
        # Find empty VNC port
        VNC_PORT=$(( $(__find_free_port 5900 5910) - 5900 ))
        echo "VNC port: $VNC_PORT"
        VNC_OPT="-vnc :$VNC_PORT"
      fi

      # Select disk
      QEMU_DRIVES="-drive file=$${image_disk}.$${image_format},cache=$${disk_cache},media=disk,if=virtio,id=drive0"
      if [ -n "$${iso_path}" ]; then
        QEMU_DRIVES="$QEMU_DRIVES -drive file=$${iso_path},media=cdrom"
        if [ "$${vm_boot}" == "cdrom" ]; then
          QEMU_DRIVES="-boot order=d $QEMU_DRIVES"
        fi
      fi
      if [ -n "${SSH_FWD_PORT}" ]; then
        HOSTFWD=",hostfwd=tcp::${SSH_FWD_PORT}-:22"
      fi
      qemu-system-$${qemu_arch} $ENABLE_KVM $QEMU_DRIVES -smp $${qemu_cpu} -m $${qemu_memory_size} -rtc base=localtime \
        -net nic,model=virtio -net user${HOSTFWD} \
        -monitor unix:$${qemu_monitor_socket},server,nowait -pidfile $${qemu_pidfile} -daemonize $VNC_OPT $LOADVM
  - exec_local: |
      VM_AVAILABLE=0
      if [ "$${vm_expected_service}" == "ssh" ]; then
        TIMEOUT=$(( $(date +%s) + $BOOT_TIMEOUT ))
        until timeout 5 ssh -q -F $${ssh_config_file} -o ConnectionAttempts=1  $${kameleon_recipe_name} -t true && VM_AVAILABLE=1 || [ $(date +%s) -gt $TIMEOUT ];
        do
          echo -en "\rWaiting for SSH to become available in VM for out_context...($(( TIMEOUT - $(date +%s) ))s)"
          sleep 1
        done
        echo
      else
        TIMEOUT=$(( $(date +%s) + $BOOT_TIMEOUT ))
        until timeout 1 [ $(date +%s) -gt $TIMEOUT ];
        do
          echo -en "\rWaiting for VM to become available : ($(( TIMEOUT - $(date +%s) ))s)"
          sleep 1
        done
        echo
        VM_AVAILABLE=1
      fi
  - rescue:
    - exec_local: test $VM_AVAILABLE -eq 1
    - breakpoint: |
        Failed to get VM up and running (expected service: $${vm_expected_service}). Please verify the VM successfully booted with a vnc client.
  - test:
    - exec_local: test -e $${qemu_sendkeys_commands} -a -s $${qemu_sendkeys_commands}
    - exec_local: |
        echo "Sending keyboard commands to the VM"
        ruby $${qemu_sendkeys_script} -d 0.05 "$(< $${qemu_sendkeys_commands})" | $${socat_monitor} > /dev/null
    - exec_local: echo "No keyboard commands to send"

- shutdown_vm:
  - on_checkpoint: redo
  - test:
    - exec_local: test "$${shutdown_vm_immediately}" == "true"
    - group: &1
      - exec_local: |
          if [ -f $${qemu_pidfile} ]; then
            _QEMU_PID=$(< $${qemu_pidfile})
            if ps -p $_QEMU_PID > /dev/null; then
              if [ "$${force_vm_shutdown}" == "true" ]; then
                if [ -S $${qemu_monitor_socket} ]; then
                  NEXT_WAIT_TIME=0
                  echo system_powerdown | socat - UNIX-CONNECT:$${qemu_monitor_socket} || true
                  while ps -p $_QEMU_PID > /dev/null && [ $NEXT_WAIT_TIME -lt $${shutdown_timeout} ];
                  do
                    sleep 1
                    echo -en "\rWaiting for qemu virtual machine to shutdown...($(( $${shutdown_timeout} - 1 - NEXT_WAIT_TIME++ ))s)"
                  done
                fi
              else
                echo "Waiting for the VM to shutdown"
                echo "Run 'vncviewer :$VNC_PORT' to see what's happening in the VM"
                while ps -p $_QEMU_PID > /dev/null;
                do
                  sleep 2
                done
              fi
            fi
          fi
      - exec_local: |
          if [ -f $${qemu_pidfile} ]; then
            _QEMU_PID=$(< $${qemu_pidfile})
            if ps -p $_QEMU_PID > /dev/null; then
              if [ -S $${qemu_monitor_socket} ]; then
                echo "  ~> Failed"
              fi
              echo "Killing QEMU (pid: $_QEMU_PID)..."
              kill -9 "$_QEMU_PID"
            else
              if [ -S $${qemu_monitor_socket} ]; then
                echo "  ~> Done"
              fi
            fi
            rm -f $${qemu_pidfile}
          fi
          rm -f $${qemu_monitor_socket}
  - on_bootstrap_clean:
    - test:
      - exec_local: test "$${shutdown_vm_immediately}" == "false" -a "$${vm_cleanup_section}" == "bootstrap"
      - group: *1
  - on_setup_clean:
    - test:
      - exec_local: test "$${shutdown_vm_immediately}" == "false" -a "$${vm_cleanup_section}" == "setup"
      - group: *1
  - on_export_clean:
    - test:
      - exec_local: test "$${shutdown_vm_immediately}" == "false" -a "$${vm_cleanup_section}" == "export"
      - group: *1

# Require SSH_FWD_PORT bash environment variable to be set
- boot_timeout: 100
- shutdown_timeout: 100
- disk_cache: unsafe
# This must be set if you want to boot an ISO image instead of a disk
- iso_path: ""

- start_qemu_vm:
  - on_checkpoint: redo
  - check_cmd_local: qemu-system-$${qemu_arch}
  - exec_local: echo "Starting qemu..."
  - exec_local: |
      if [ "$${qemu_enable_kvm}" = "true" ]; then
        ENABLE_KVM="-enable-kvm -cpu host"
        BOOT_TIMEOUT=$${boot_timeout}
      else
        BOOT_TIMEOUT=$(($${boot_timeout}*2))
      fi
      if [ -f "vm_state_to_load.txt" ]
      then
          SAVED_STATE="$(cat vm_state_to_load.txt)"
          LOADVM="-loadvm $SAVED_STATE"
          rm -f vm_state_to_load.txt
      fi
      # Find empty VNC port
      VNC_PORT=$(( $(__find_free_port 5900 5910) - 5900 ))
      echo "VNC port: $VNC_PORT"

      # Select disk
      if [ -z "$${iso_path}" ]; then
        QEMU_DISK=''
      else
        QEMU_DISK='-boot order=d -cdrom $${iso_path} -hda $${qemu_image_disk}'
      fi
      qemu-system-$${qemu_arch} $ENABLE_KVM \
        $QEMU_DISK -drive file=$${image_disk}.$${image_format},cache=$${disk_cache},media=disk,if=virtio,id=drive0 \
        -smp $${qemu_cpu} \
        -m $${qemu_memory_size} \
        -rtc base=localtime \
        -net nic,model=virtio \
        -net user,hostfwd=tcp::${SSH_FWD_PORT}-:22 \
        -monitor unix:$${qemu_monitor_socket},server,nowait \
        -pidfile $${qemu_pidfile} \
        -daemonize -vnc :$VNC_PORT $LOADVM
  - exec_local: |
        SSH_AVAILABLE=0
        TIMEOUT=$(( $(date +%s) + $BOOT_TIMEOUT ))
        until timeout 5 ssh -q -F $${ssh_config_file} -o ConnectionAttempts=1  $${kameleon_recipe_name} -t true && SSH_AVAILABLE=1 || [ $(date +%s) -gt $TIMEOUT ];
        do
          echo -en "\rWaiting for SSH to become available for out_context...($(( TIMEOUT - $(date +%s) ))s)"
          sleep 1
        done
        echo ""
  - rescue:
    - exec_local: test $SSH_AVAILABLE -eq 1
    - breakpoint: Failed to connect to VM via SSH. Please verify the VM successfully booted with a vnc client.

- shutdown_qemu_vm_on_setup_clean: 
  - on_checkpoint: redo
  - check_cmd_local: socat
  - on_setup_clean: &1
    - exec_out: echo "Sync"
    - exec_out: sync
    - exec_out: echo "Shutting down virtual machine"
    - exec_out: shutdown -h now
    - exec_local: |
        if [ -f $${qemu_pidfile} ]; then
          _QEMU_PID=$(cat $${qemu_pidfile})
          if ps -p $_QEMU_PID > /dev/null; then
            if [ -S $${qemu_monitor_socket} ]; then
              NEXT_WAIT_TIME=0
              echo system_powerdown | socat - UNIX-CONNECT:$${qemu_monitor_socket} || true
              while ps -p $_QEMU_PID > /dev/null && [ $NEXT_WAIT_TIME -lt $${shutdown_timeout} ];
              do
                sleep 1
                echo -en "\rWaiting for qemu virtual machine to shutdown...($(( $${shutdown_timeout} - 1 - NEXT_WAIT_TIME++ ))s)"
              done
            fi
            if ps -p $_QEMU_PID > /dev/null; then
              if [ -S $${qemu_monitor_socket} ]; then
                echo "  ~> Failed"
              fi
              echo "Killing QEMU (pid: $_QEMU_PID)..."
              kill -9 "$_QEMU_PID"
            else
              if [ -S $${qemu_monitor_socket} ]; then
                echo "  ~> Done"
              fi
            fi
            rm -f $${qemu_pidfile}
          fi
        fi
        rm -f $${qemu_monitor_socket}

- shutdown_qemu_vm_on_export_clean:
  - on_checkpoint: redo
  - check_cmd_local: socat
  - on_export_clean: *1

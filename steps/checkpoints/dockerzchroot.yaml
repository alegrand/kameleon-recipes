enabled?:
  - exec_local: test -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID

create:
  - exec_local: |
      docker stop $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null || docker kill $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
      docker commit $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) $${docker_image}:@microstep_id > /dev/null
      docker rm $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
      sed -i "/^$(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID)$/d" $KAMELEON_WORKDIR/CONTAINERS_TO_CLEAN
      rm -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID
  - exec_local: |
      $${zfs_cmd} snapshot $${rootfs_dataset}/rootfs@@microstep_id
      test "$( $${zfs_cmd} get origin $${rootfs_dataset}/rootfs -H -o value )" = '-' || $${zfs_cmd} promote $${rootfs_dataset}/rootfs
      while $${zfs_cmd} list $${rootfs_dataset}/checkpoints -H >& /dev/null; do
        $${zfs_cmd} destroy $${rootfs_dataset}/checkpoints -R -f || (echo "retring in 1s" 1>&2; sleep 1)
      done
      $${zfs_cmd} set mountpoint=none $${rootfs_dataset}/rootfs
      $${zfs_cmd} rename $${rootfs_dataset}/rootfs $${rootfs_dataset}/checkpoints
      $${zfs_cmd} clone $${rootfs_dataset}/checkpoints@@microstep_id $${rootfs_dataset}/rootfs -o mountpoint=$${rootfs_host_dir}
  - exec_local: |
      docker run -d -i -h $${docker_hostname} --cidfile $KAMELEON_WORKDIR/MAIN_CONTAINER_ID -v $${rootfs_host_dir}:$${rootfs_container_dir} --privileged $${docker_image}:@microstep_id cat > /dev/null
      while ! [ -s $KAMELEON_WORKDIR/MAIN_CONTAINER_ID ] || ! docker exec -i $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) true; do sleep 1; done
      echo $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) >> $KAMELEON_WORKDIR/CONTAINERS_TO_CLEAN
  - reload_context: out
  - reload_context: in

apply:
  - exec_local: |
      for i in $( docker image ls --filter reference=$${docker_image} --filter since=$${docker_image}:@microstep_id -q ); do
        docker image rm -f $i
      done || true
      rm -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID
  - exec_local: |
      $${zfs_cmd} destroy $${rootfs_dataset}/rootfs
      $${zfs_cmd} rollback $${rootfs_dataset}/checkpoints@@microstep_id -R -f
      $${zfs_cmd} clone $${rootfs_dataset}/checkpoints@@microstep_id $${rootfs_dataset}/rootfs -o mountpoint=$${rootfs_host_dir}
  - exec_local: |
      docker run -d -i -h $${docker_hostname} --cidfile $KAMELEON_WORKDIR/MAIN_CONTAINER_ID -v $${rootfs_host_dir}:$${rootfs_container_dir} --privileged $${docker_image}:@microstep_id cat > /dev/null
      while ! [ -s $KAMELEON_WORKDIR/MAIN_CONTAINER_ID ] || ! docker exec -i $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) true; do sleep 1; done
      echo $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) >> $KAMELEON_WORKDIR/CONTAINERS_TO_CLEAN

list:
  - exec_local: |
      for i in $(docker image ls --format "{{.Tag}}" --filter reference=$${docker_image}); do
        if $${zfs_cmd} list $${rootfs_dataset}/checkpoints@$i -H >& /dev/null; then
          echo $i
        fi
      done || true

clear:
  - exec_local: |
      for i in $( docker image ls --filter reference=$${docker_image} -q ); do
        docker image rm -f $i
      done || true
      ! $${zfs_cmd} list $${rootfs_dataset} -H >& /dev/null || $${zfs_cmd} destroy $${rootfs_dataset} -f -R

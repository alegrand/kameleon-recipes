#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# DESCRIPTION: Ramdisk OS for the deployment step of Kadeploy
#
# Notes:
# - force use of busybox rather than klibc-utils (which breaks the mount)
#
#==============================================================================
---
extend: from_scratch/debian-base.yaml

global:
  release: jessie
  bootstrap_packages: initramfs-tools busybox
  variant: minbase
  enable_lighten: true
  root_authorized_keys: $${kameleon_data_dir}/kadeploy_root_authorized_keys
  gpg_keyserver: keyserver.ubuntu.com
  arch_specific_packages: kexec-tools grub-pc fsarchiver
  version: beta

bootstrap:
  - enable_checkpoint
  - download_iso
  - prepare_disk
  - ssh_config:
    - select_empty_port:
      - on_checkpoint: redo
      - exec_local: |
          # Find empty SSH forwarding port
          SSH_FWD_PORT=$(__find_free_port 50000 60000)
          echo "SSH forwarding port: $SSH_FWD_PORT"
    - prepare_ssh_config:
      - on_checkpoint: redo
      - write_local:
        - $${ssh_config_file}
        - |
          Host $${kameleon_recipe_name}
          HostName 127.0.0.1
          Port ${SSH_FWD_PORT}
          User root
          UserKnownHostsFile /dev/null
          StrictHostKeyChecking no
          PasswordAuthentication no
          IdentitiesOnly yes
          LogLevel FATAL
          ForwardAgent yes
          Compression yes
          Protocol 2
  - start_qemu:
    - start_qemu_vm
    - shutdown_qemu_vm_on_export_clean
  - install_build_packages
  - debootstrap:
    - partition_disk
    - mount_mountdir
    - run_debootstrap_script
  - start_chroot

setup:
  - configure_system:
    - hosts:
      exec_in: |
          cat <<'EOF' > "${DEBIRF_ROOT}/etc/hosts"
          127.0.0.1       localhost
          ::1     ip6-localhost ip6-loopback
          fe00::0 ip6-localnet
          ff00::0 ip6-mcastprefix
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters
          ff02::3 ip6-allhosts
          EOF
    - network_interfaces:
      - write_in:
        - /etc/network/interfaces
        - |
          auto lo
          iface lo inet loopback

          iface dhcp inet dhcp
  - configure_debian:
    - lighten_packages:
      - exec_in: |
          mkdir -p /etc/dpkg/dpkg.conf.d
          echo 'path-exclude=/usr/share/locale/*' >> /etc/dpkg/dpkg.conf.d/01_lighten
          echo 'path-exclude=/usr/share/man/*' >> /etc/dpkg/dpkg.conf.d/01_lighten
          echo 'path-exclude=/usr/share/doc/*' >> /etc/dpkg/dpkg.conf.d/01_lighten
          mkdir -p /etc/apt/apt.conf.d
          echo 'APT::Install-Recommends "0" ; APT::Install-Suggests "0" ; ' > /etc/apt/apt.conf.d/01_lighten
    - configure_source_list:
      - exec_in: sed -i -e 's/^/#/' /etc/apt/sources.list
      - exec_in: mkdir -p /etc/apt/sources.list.d
      - write_in:
        - /etc/apt/sources.list.d/$${release}.list
        - |
          deb $${debian_mirror_uri} $${release} main contrib non-free
          deb http://security.debian.org/ $${release}/updates main contrib non-free
      - write_in:
        - /etc/apt/sources.list.d/$${release}-backports.list
        - |
          deb $${debian_mirror_uri} $${release}-backports main contrib non-free
      - exec_in: |
          if [ "$${debian_arch}" == "amd64" ]; then
            cat <<EOF >/etc/apt/sources.list.d/hwraid.list
          deb http://hwraid.le-vert.net/debian $${release} main
          EOF
            apt-key adv --keyserver $${gpg_keyserver} --recv-key 6005210E23B3D3B4
          fi
      - exec_in: apt-get update
    - debconf-noninteractive:
      - exec_in: |
          debconf-set-selections <<'EOF'
          # Interface to use:
          # Choices: Dialog, Readline, Gnome, Kde, Editor, Noninteractive
          debconf debconf/frontend select Noninteractive
          EOF
          export DEBIAN_FRONTEND=noninteractive
          export DEBCONF_NONINTERACTIVE_SEEN=true
    - set_time:
      - exec_in: |
          debconf-set-selections <<'EOF'
          tzdata tzdata/Areas select Europe
          tzdata tzdata/Zones/Europe select Paris
          EOF
          rm -f /etc/localtime /etc/timezone
          dpkg-reconfigure tzdata
  - install_extra_packages:
    - kernel:
      - exec_in: apt-get install -y --force-yes linux-image-$${debian_kernel_arch}
    - firmware:
      - exec_in: apt-get install -y --force-yes firmware-linux firmware-bnx2 firmware-bnx2x
    - system_utils: 
      - exec_in: apt-get install -y --force-yes ash systemd systemd-sysv ntpdate isc-dhcp-client openssh-client openssh-server taktuk
      - exec_in: sed -i -e 's/\(NTPSERVERS=\).*/\1="ntp1.grid5000.fr ntp2.grid5000.fr"/;s/\(NTPDATE_USE_NTP_CONF=\).*/\1=no/' /etc/default/ntpdate
      - exec_in: |
          if [ -n "$${arch_specific_packages}" ]; then
            apt-get install -y --force-yes $${arch_specific_packages}
          fi
    - disk_utils:
      - exec_in: apt-get install -y --force-yes tar bzip2 xz-utils hdparm parted dosfstools ntfs-3g aufs-tools
    - ruby_packages:
      - exec_in: apt-get install -y --force-yes ruby ruby-net-ssh ruby-net-ssh-multi ruby-daemons 
  - kadeploy_customization:
    - set_motd:
      - write_in:
        - /etc/motd
        - |
          Welcome to Kadeploy deployment ramdisk OS (version: $${release}-$${debian_arch}_$${version}, $(date +'%F %T'))
    - set_root_authorized_keys:
      - exec_in: mkdir -p /root/.ssh
      - exec_in: chmod 755 /root/.ssh
      - pipe:
        - exec_local: |
            if [ -r $${root_authorized_keys} ]; then
              cat $${root_authorized_keys}
            else
              echo "# No key found"
            fi
        - exec_in: cat > /root/.ssh/authorized_keys
      - exec_in: chmod 644 /root/.ssh/authorized_keys
    - set_root_passwordless:
      - exec_in: passwd -d root
    - set_root_bashrc:
      - exec_in: |
          cat <<'EOF' > /root/.bashrc
          export PS1='$? \h:\w \$'
          umask 022
          export LS_OPTIONS='--color=auto'
          eval "$(dircolors)"
          alias ls='ls $LS_OPTIONS'
          alias ll='ls $LS_OPTIONS -l'
          alias l='ls $LS_OPTIONS -lA'
          alias rm='rm -i'
          alias cp='cp -i'
          alias mv='mv -i'
          export LC_ALL="C"
          export LANG="C"
          EOF
    - set_rc_local:
      - exec_in: |
          cat <<'EOF' > /etc/rc.local
          #!/bin/bash -e
          # parse kadeploy-specific kernel command line arguments
          if [ -f /sys/module/drm_kms_helper/parameters/poll ]; then
            echo 'Desactivate drm_kms_helper poll...'
            echo 0 > /sys/module/drm_kms_helper/parameters/poll
          fi
          netdev=eth0
          for param in $(< /proc/cmdline); do
            case "$p" in
              NETDEV=*)
                netdev=${p#NETDEV=}
              ;;
            esac
          done
          ifup "$netdev"=dhcp
          if [ ! -f "/var/lib/dhcp/dhclient.${netdev}.leases" ]
          then
            exit 1
          fi
          mkdir -p /rambin /mnt/dest /mnt/tmp
          (while true; do nc -l -p 25300; done) &
          exit 0
          EOF
          chmod 755 /etc/rc.local
    - add_dhcp_hostname_script:
      - exec_in: |
          cat <<'EOF' > /etc/dhcp/dhclient-enter-hooks.d/hostname
          if [ -n $new_host_name ] && [ -n $new_domain_name ]; then
            echo "$new_host_name.$new_domain_name" > /etc/hostname
            /bin/hostname "$new_host_name.$new_domain_name"
            if [ -n $new_ip_address ]; then
              echo "$new_ip_address $new_host_name.$new_domain_name $new_host_name" >> /etc/hosts
            fi
          fi
          EOF
          chmod 755 /etc/dhcp/dhclient-enter-hooks.d/hostname
    - remove_udev_persistent-net_rules:
      - exec_in: rm -f /etc/udev/rules.d/*-persistent-net.rules
  - create_ramdisk:
    - clean_system:
      - exec_in: apt-get -y --force-yes autoremove
      - exec_in: apt-get -y --force-yes autoclean
      - exec_in: apt-get -y --force-yes purge
      - exec_in: apt-get -y --force-yes clean
    - create_rootfs:
      - exec_out: |
          cd $${rootfs} # use out context: quicker if foreign arch
          find . -path './boot/*' -prune \
              -o -path './usr/share/locale/*' -prune \
              -o -path './usr/share/man/*' -prune \
              -o -path './usr/share/doc/*' -prune \
              -o -path './var/tmp/*' -prune \
              -o -path './var/lib/apt/lists/*' -prune \
              -o -path './tmp/*' -prune \
              -o -path './vmlinuz' -prune \
              -o -path './initrd.img' -prune \
              -o -xdev -print | cpio -o -H newc  | gzip -9 > $${rootfs}/boot/root.cgz
    - add_initramfs_hook:
      - exec_in: |
          cat <<'EOF' > /etc/initramfs-tools/hooks/copy-root-archive
          #!/bin/sh
          PREREQ=""
          prereqs()
          {
               echo "$PREREQ"
          }
          case $1 in
          prereqs)
               prereqs
               exit 0
               ;;
          esac
          . /usr/share/initramfs-tools/hook-functions
          # Begin real processing below this line
          cp -v /boot/root.cgz $DESTDIR
          EOF
          chmod 755 /etc/initramfs-tools/hooks/copy-root-archive
    - add_initramfs_scripts:
      - exec_in: |
          cat <<'EOS' > /etc/initramfs-tools/scripts/local-premount/create-root-tmpfs
          #!/bin/sh
          PREREQ="lvm"
          prereqs()
          {
               echo "$PREREQ"
          }
          case $1 in
          prereqs)
               prereqs
               exit 0
               ;;
          esac
          . /scripts/functions
          # Begin real processing below this line
          log_begin_msg "Mount temporary rootfs"
          cat <<EOF > /etc/fstab
          ${rootmnt}.tmp ${rootmnt} root-tmpfs bind 0 0
          EOF
          mkdir -p ${rootmnt}.tmp
          mount -t tmpfs -o size=1G root-tmpfs ${rootmnt}.tmp
          if [ $? -ne 0 ]; then
             panic "Failed to create tmpfs"
          fi
          log_end_msg
          
          log_begin_msg "Populate rootfs"
          cd ${rootmnt}.tmp 
          gunzip -c /root.cgz | cpio -i
          if [ $? -ne 0 ]; then
             panic "Failed to populate"
          fi
          log_end_msg
          EOS
          chmod 755 /etc/initramfs-tools/scripts/local-premount/create-root-tmpfs
          cat <<'EOS' > /etc/initramfs-tools/scripts/local-bottom/remove-root-tmpfs
          #!/bin/sh
          PREREQ="lvm"
          prereqs()
          {
               echo "$PREREQ"
          }
          case $1 in
          prereqs)
               prereqs
               exit 0
               ;;
          esac
          . /scripts/functions
          # Begin real processing below this line
          log_begin_msg "Umount temporary rootfs"
          cat <<EOF > ${rootmnt}.tmp/etc/fstab
          rootfs / tmpfs size=1G 0 0
          EOF
          umount ${rootmnt}.tmp 
          if [ $? -ne 0 ]; then
            panic "Failed to umount"
          fi
          log_end_msg
          EOS
          chmod 755 /etc/initramfs-tools/scripts/local-bottom/remove-root-tmpfs
    - configure_initramfs:
      - exec_in: |
          sed -i -e 's/^MODULES=.*/MODULES=list/' \
            /etc/initramfs-tools/initramfs.conf
    - generate_new_initramfs:
      - exec_in: update-initramfs -u
  - move_files_to_out:
    - on_checkpoint: redo
    - copy_files:
      - exec_out: |
          mkdir -p /tmp
          cp $${rootfs}/vmlinuz /tmp/vmlinuz
          cp $${rootfs}/initrd.img /tmp/initrd.img
export:
  - export_vmlinuz_initrd:
    - vmlinuz:
      - out2local:
        - /tmp/vmlinuz
        - ./kadeploy-vmlinuz_$${release}-$${debian_arch}_$${version}
    - initrd:
      - out2local:
        - /tmp/initrd.img
        - ./kadeploy-initrd.img_$${release}-$${debian_arch}_$${version}

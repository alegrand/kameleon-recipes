- export_appliance_script: $${kameleon_data_dir}/helpers/export_appliance.py
- export_tar_script: $${kameleon_data_dir}/helpers/export_tar.py
- create_appliance_script: $${kameleon_data_dir}/helpers/create_appliance.py
- need_bootloader_script: $${kameleon_data_dir}/helpers/need_bootloader.py

- install_bootloader_if_needed:
    - check_cmd_local: python2
    - exec_local: echo "Exporting the docker image to $${rootfs}"
    - exec_local: mkdir -p $${rootfs}
    - exec_local: docker export $(cat MAIN_CONTAINER_ID) | tar --touch -xf - -C $${rootfs}
    - exec_local: chmod 755 $${rootfs}
    - exec_local: |
        if [ "$(python2 $${need_bootloader_script} -F $${output_formats})" = "yes" ]; then
            # Create an appliance from rootfs directory
            python2 $${create_appliance_script} $${rootfs} \
              --size $${image_size} \
              -o $${output_filename} \
              --filesystem $${filesystem_type} \
              --format=qcow2 \
              --append "$${kernel_args}" \
              --compress
            rm -f docker_export.tar.gz
            # Export the appliance to the desired formats
            python2 $${export_appliance_script} $${output_filename}.qcow2 \
              -o $${output_filename} \
              --formats $${output_formats} \
              --tar-compression-level $${tar_compression_level} \
              --tar-excludes $${tar_excludes}
        fi
    - exec_local: |
        if [ "$(python2 $${need_bootloader_script} -F $${output_formats})" = "no" ]; then
            python2 $${export_tar_script} $${rootfs} \
              -o $${output_filename} \
              --formats $${output_formats} \
              --tar-compression-level $${tar_compression_level} \
              --tar-excludes $${tar_excludes}
        fi

#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# DESCRIPTION: Debian generic recipe + debootstrap to run in ramdisk
#
# USAGE:
#   Select directly in this recipe:
#
#   - distribution: debian or ubuntu
#   - release: wheezy, testing, sid...
#   - architechture: default amd64
#
#   or, override the globals directly in CLI:
#
#   kameleon build --global distrib:debian --global release:wheezy
#
#   or extends this recipe with your own and override those variable in it.
#
#==============================================================================
---
extend: debian-base.yaml

global:
  release: jessie
  bootstrap_packages: openssh-server initramfs-tools linux-image-$${debian_kernel_arch}  
  variant: minbase
  enable_lighten: true

bootstrap:
  - enable_checkpoint
  - download_iso
  - prepare_disk
  - ssh_config:
    - select_empty_port:
      - on_checkpoint: redo
      - exec_local: |
          # Find empty SSH forwarding port
          SSH_FWD_PORT=$(__find_free_port 50000 60000)
          echo "SSH forwarding port: $SSH_FWD_PORT"
    - prepare_ssh_config:
      - on_checkpoint: redo
      - write_local:
        - $${ssh_config_file}
        - |
          Host $${kameleon_recipe_name}
          HostName 127.0.0.1
          Port ${SSH_FWD_PORT}
          User root
          UserKnownHostsFile /dev/null
          StrictHostKeyChecking no
          PasswordAuthentication no
          IdentitiesOnly yes
          LogLevel FATAL
          ForwardAgent yes
          Compression yes
          Protocol 2

  - start_qemu:
    - start_qemu_vm
    - shutdown_qemu_vm_on_export_clean
  - install_build_packages
  - debootstrap
  - start_chroot

setup:
  - "@base"
  - create_ramdisk:
    - create_rootfs:
      - exec_in: |
          cd /
          find . -path './boot/*' -prune \
              -o -path './usr/share/locale/*' -prune \
              -o -path './usr/share/man/*' -prune \
              -o -path './usr/share/doc/*' -prune \
              -o -path './var/tmp/*' -prune \
              -o -path './tmp/*' -prune \
              -o -xdev -print | cpio -o -H newc  | gzip -9 > /boot/root.cgz
    - add_initramfs_hook:
      - write_in:
        - /etc/initramfs-tools/hooks/copy-root-archive
        - |
            #!/bin/sh
            PREREQ=""
            prereqs()
            {
                 echo "$PREREQ"
            }
            case $1 in
            prereqs)
                 prereqs
                 exit 0
                 ;;
            esac
            . /usr/share/initramfs-tools/hook-functions
            # Begin real processing below this line
            cp -v /boot/root.cgz $DESTDIR
      - exec_in: chmod 755 /etc/initramfs-tools/hooks/copy-root-archive
    - add_initramfs_scripts:
      - write_in:
        - /etc/initramfs-tools/scripts/local-premount/create-root-tmpfs
        - |
            #!/bin/sh
            PREREQ="lvm"
            prereqs()
            {
                 echo "$PREREQ"
            }
            case $1 in
            prereqs)
                 prereqs
                 exit 0
                 ;;
            esac
            . /scripts/functions
            # Begin real processing below this line
            log_begin_msg "Mount temporary rootfs"
            cat <<EOF > /etc/fstab
            ${rootmnt}.tmp ${rootmnt} root-tmpfs bind 0 0
            EOF
            mkdir -p ${rootmnt}.tmp
            mount -t tmpfs -o size=1G root-tmpfs ${rootmnt}.tmp
            if [ $? -ne 0 ]; then
               panic "Failed to create tmpfs"
            fi
            log_end_msg
            
            log_begin_msg "Populate rootfs"
            cd ${rootmnt}.tmp 
            zcat /root.cgz | cpio -id
            if [ $? -ne 0 ]; then
               panic "Failed to populate"
            fi
            log_end_msg
      - exec_in: chmod 755 /etc/initramfs-tools/scripts/local-premount/create-root-tmpfs
      - write_in:
        - /etc/initramfs-tools/scripts/local-bottom/remove-root-tmpfs
        - |
            #!/bin/sh
            PREREQ="lvm"
            prereqs()
            {
                 echo "$PREREQ"
            }
            case $1 in
            prereqs)
                 prereqs
                 exit 0
                 ;;
            esac
            . /scripts/functions
            # Begin real processing below this line
            log_begin_msg "Umount temporary rootfs"
            cat <<EOF > ${rootmnt}.tmp/etc/fstab
            rootfs / tmpfs size=1G 0 0
            EOF
            umount ${rootmnt}.tmp 
            if [ $? -ne 0 ]; then
              panic "Failed to umount"
            fi
            log_end_msg
      - exec_in: chmod 755 /etc/initramfs-tools/scripts/local-bottom/remove-root-tmpfs
    - configure_initramfs:
      - exec_in: |
          sed -i -e 's/^MODULES=.*/MODULES=list/' \
            /etc/initramfs-tools/initramfs.conf
    - generate_new_initramfs:
      - exec_in: update-initramfs -u
export:
  - export_vmlinuz_initrd:
    - vmlinuz:
      - in2local:
        - /vmlinuz
        - ./vmlinuz
    - initrd:
      - in2local:
        - /initrd.img
        - ./initrd.img
